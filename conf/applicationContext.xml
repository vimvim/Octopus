<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
       	http://www.springframework.org/schema/beans
       	http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx.xsd">


    <context:annotation-config/>
    <context:spring-configured/>

    <!--
    <context:load-time-weaver weaver-class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver" />
    -->

    <context:component-scan base-package="controllers, services, repositories, models, ui, schema, spring, actors, viewmodels" />

    <bean class="spring.SpringAkkaConfig" />

    <!--<tx:annotation-driven mode="proxy"/> -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- Use own database pool -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/octopus"/>
        <property name="username" value="root"/>
        <property name="password" value="vim"/>
    </bean>

    <!-- For in-memory HSQLDB
    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource"
          p:driverClassName="org.hsqldb.jdbcDriver" p:url="jdbc:hsqldb:mem:JpaScala"
          p:username="sa" p:password=""/>
    -->


    <bean id="jpaHibernateAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="database" value="MYSQL" />
        <!-- <property name="showSql" value="true"/> -->
        <property name="generateDdl" value="true"/>
        <property name="databasePlatform" value="org.hibernate.dialect.MySQL5Dialect" />
    </bean>

    <bean id="entityManagerFactory" class= "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="Octopus"/>
        <property name="dataSource" ref="dataSource" />
        <property name="jpaVendorAdapter" ref="jpaHibernateAdapter" />
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.connection.charSet">UTF-8</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <!-- <prop key="hibernate.show_sql">true</prop> -->
                <!-- <prop key="hibernate.format_sql">true</prop> -->
            </props>
        </property>
    </bean>

    <bean id="entityManager" class="org.springframework.orm.jpa.support.SharedEntityManagerBean">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <bean class="org.springframework.beans.factory.config.CustomScopeConfigurer">
        <property name="scopes">
            <map>
                <entry key="session">
                    <bean class="spring.VaadinSessionScope"/>
                </entry>
            </map>
        </property>
    </bean>

    <bean id="uiEventBus" class="com.google.common.eventbus.EventBus" scope="session"/>

    <bean id="uiViews" class="java.util.TreeMap">
        <constructor-arg>
            <map key-type="java.lang.String" value-type="java.lang.Class">
                <entry key="dashboard" value="ui.views.DashboardView" />
                <entry key="sales" value="ui.views.SalesView" />
                <entry key="transactions" value="ui.views.TransactionsView" />
                <entry key="reports" value="ui.views.ReportsView" />
                <entry key="schedule" value="ui.views.ScheduleView" />
            </map>
        </constructor-arg>
    </bean>

    <bean id="schemasRegistry" class="schema.SchemasRegistry">
        <property name="schemas">
            <list>
                <bean id="schema.UserTwitter" class="schema.SchemaDescriptor" p:name="twitter.user">
                    <property name="descriptors">
                        <list>
                            <bean class="schema.AttributeDescriptorInt" p:name="id" />
                            <bean class="schema.AttributeDescriptorString" p:name="screen_name" />
                            <bean class="schema.AttributeDescriptorString" p:name="name" />
                        </list>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <!--
    <bean id="rootShellMeta" class="console.BaseShellMeta">
        <constructor-arg>
            <map key-type="java.lang.String" value-type="java.lang.Class">
                <entry key="repository" value-ref="console.RepositoriesShell" />
            </map>
        </constructor-arg>
    </bean>
    -->

    <bean id="rootShellsBindings" class="java.util.TreeMap">
        <constructor-arg>
            <map key-type="java.lang.String" value-type="java.lang.Object">
                <entry key="repository" value-ref="rootShellsBindings" />
            </map>
        </constructor-arg>
    </bean>

    <bean id="shellsBindings" class="java.util.TreeMap">
        <constructor-arg>
            <map key-type="java.lang.Class" value-type="java.util.TreeMap">
                <entry key="console.RootShell" value-ref="rootShellsBindings" />
            </map>
        </constructor-arg>
    </bean>

    <bean id="consoleEnvInit" class="java.util.TreeMap">
    </bean>


    <!--
    <bean id="consoleSessionHandler.Actor" class="actors.console.SessionHandlerFactory$.MODULE$"  scope="prototype" factory-method="create">

    </bean>
    -->

    <!--
    <bean id="presenter.tweets.full" class="viewmodels.TweetsFullPresenter">
        <constructor-arg>
            <ref bean="tweetsRepo" />
        </constructor-arg>
    </bean>

    <bean id="presenter.tweets.short" class="viewmodels.TweetsShortPresenter">
        <constructor-arg>
            <ref bean="tweetsRepo" />
        </constructor-arg>
    </bean>
    -->

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>

    <!-- Turn on @Autowired, @PostConstruct etc support -->
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
    <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor" />


</beans>
